#!/usr/bin/python3
import subprocess as sp
from sys import exit
import argparse
from os.path import basename
from os import path
from os import listdir
import pexpect
import logging
#List of backupvolumes
uuiddict={'481da90a-0c78-4891-b5a0-ed420b422034':'B4',"9e40b3e3-fbd0-4f6a-8b61-102052a81e8f":'B2'} #uuid:name
uuidlist=list(uuiddict)
MAX=9
verbose_groups={}
DEVC='device: \"'
Q='\"'
DIRC='dir: \"'
setup_mountpoint_done=False
setup_snapshot_done=False
setup_decryptvol_done=False
basedir='/mnt/backup/'
src_snap_dir='/snapshots'
dest_dir_base='/mnt/backup'
CONFIG_LOGLEVEL=logging.INFO

def parse_args():
    """Parse command-line arguments."""

    parser = argparse.ArgumentParser(description='backup tool')
    parser.add_argument('--verbose', action="store",default=2, help='set verbosity level')
    parser.add_argument('-v', dest='add_verbose', action="count", default=0 ,help='specify multiple times to increase verbosity level')
    parser.add_argument('-d', '--debug', action="store_true",default=False, help='enable debugging output')
    parser.add_argument('-t', '--testing', action="store_true",default=False, help='does something undefined')
    parser.add_argument('-u', '--unsetup', action="store_true",default=False, help='unmount and unmap, so you can unplug the thing')
    return parser.parse_args()

args=parse_args()
verbosity_level = args.verbose + args.add_verbose
handler=logging.StreamHandler()
if args.debug:
  LOGLEVEL=logging.DEBUG
  handler.setFormatter(logging.Formatter('%(funcName)s: %(message)s'))
else:
  LOGLEVEL=CONFIG_LOGLEVEL
  handler.setFormatter(logging.Formatter('%(message)s'))

log=logging.getLogger('root')
log.setLevel(LOGLEVEL)
log.addHandler(handler)




def get_device_name(line):
    name=''
    for char in line:
        if not char is ' ':
            name=name+char
        else: break
    if name[-1] is ':':
        return name[:-1]
    else: raise Exception('damned, where is the colon. fix code bro')

def get_name_at_start_of_line(line):
    return get_device_name(line)

def v(message,minlevel,**kwargs):
    ## prints only highes allowed level of a group
    ## specify smallest highest first
    if 'g' in kwargs and 'r' in kwargs:
            group = kwargs['g']
            verbose_groups.pop(group)
    if minlevel <= verbosity_level:
        if 'g' in kwargs and not 'r' in kwargs:
            group = kwargs['g']
            if group in verbose_groups:
                if minlevel >= verbose_groups[group]:
                    verbose_groups.update({group:minlevel})
                    print(message)
            else:
                verbose_groups.update({group:minlevel})
                print(message)
        else:
            print(message)

def check_if_devname_is_crypto_LUKS(dev_name):
    foundline=False
    for line in blkidout:
        if get_device_name(line) == dev_name:
            v('found line of blkidout with device name matching device name',6)
            found=line.find("TYPE=")
            v('found type keyword in line of blkidout',6)
            if found is -1:
                raise Exception("no type found in line : "+line)
            found=line.find("TYPE=\""+"crypto_LUKS"+"\"")
            if not found is -1: return True
            else: return False
            foundline=True
    if not foundline: raise Exception("devname not found in the lines.")

def check_luks_open(devname):
    cmd=['sudo','dmsetup','deps','-o','blkdevname']
    out=sp.check_output(cmd).decode().splitlines()
    #print(out)
    for line in out:
        if line.find("("+basename(devname)+")") is not -1:
            #print('found')
            name=get_name_at_start_of_line(line)
            #print(name)
            cmd2=['sudo','cryptsetup','status',name]
            out2=sp.check_output(cmd2).decode().splitlines()
            #print(out2[0])
            if out2[0].find(name+' is active') is not -1:
                #opened
                return True
            else: return False
    return False

def get_crypto_LUKS_volume_devname(dev_name):
    cmd=['sudo','dmsetup','deps','-o','blkdevname']
    out=sp.check_output(cmd).decode().splitlines()
    #print(out)
    for line in out:
        if line.find("("+basename(dev_name)+")") is not -1:
            #print('found')
            name=get_name_at_start_of_line(line)
            cmd2=['sudo','cryptsetup','status',name]
            out2=sp.check_output(cmd2).decode().splitlines()
            #print(out2[0])
            f=out2[0].find(name+' is active')
            if f is not -1:
                mycryptvol_devname=out2[0][0:f+len(name)]
                return mycryptvol_devname
            else: raise Exception('volume devname can not determined if cryptvol is inactive and it  seems not active')
    raise Exception( 'devname( '+dev_name+' ) not found in output of :'+str(cmd)+' Probably not open.')

def open_crypto_LUKS(encrypt_dev_name,decrypt_vol_name):
    cmd=['sudo','cryptsetup','luksOpen',encrypt_dev_name,decrypt_vol_name]
    child = pexpect.spawn(cmd[0],cmd[1:])
    child.interact()

def close_crypto_LUKS(decrypt_vol_name):
    cmd=['sudo','cryptsetup','luksClose',decrypt_vol_name]
    sp.check_call(cmd)

def setup_snapshot():
    if input("create snapshot ? (y/n):") == "y":
        global snap
        time=sp.check_output(['date','-Is']).decode().splitlines()
        snap = src_snap_dir + '/snapshot-start-'+time[0]
        a=sp.check_call(['sudo','btrfs','sub','snap','-r','/',snap])
        global setup_snapshot_done
        setup_snapshot_done=True

def setup_decryptvol():
    v('setting up decryptvol',6)
    global blkidout
    global backupdecryptvolname
    global backupdecryptvol_devname
    global encrypted_dev_name
    global setup_decryptvol_done
    blkidout=sp.check_output(['sudo','blkid']).decode().splitlines()
    v('searching for the uuids: \n'+"\n".join(uuidlist),7)
    for line in blkidout:
        v('processing line of blkidout: '+line,9)
        for uuid in uuidlist:
            v('searching for uuid: '+uuid,9)
            found=line.find("UUID=\""+uuid+"\"")
            v(found,9)
            if found is not -1:
                v('backupdevice found: '+uuid,2)
                v('uuid found in line of blkidout, means backupdevice found: '+uuid,4)
                dev_name=get_device_name(line)
                v('could obtain device name: '+dev_name,5)
                v('checking if type is crypto_LUKS by useing the device name for searching the whole blkidout. Ignoring that there is already the line found...',7)
                v('checking if type is crypto_LUKS by useing the device name for searching the whole blkidout. Ignoring that there is already the line found...',3)
                is_crypto_LUKS=check_if_devname_is_crypto_LUKS(dev_name)
                backupdecryptvolname='backupdecryptvol_'+uuiddict[uuid]
                if is_crypto_LUKS:
                    encrypted_dev_name=dev_name
                    v('it is crypto_LUKS',7)
                    if check_luks_open(dev_name):
                        v('it is already open',3)
                        backupdecryptvol_devname=get_crypto_LUKS_volume_devname(dev_name)
                        v('backupdecryptvol devname is : \"'+backupdecryptvol_devname+'\"',2)
                        setup_decryptvol_done=True
                    else:
                        v('it is not open. opening , name will be: \"'+backupdecryptvolname+'\" ...',2)
                        open_crypto_LUKS(dev_name,backupdecryptvolname)
                        backupdecryptvol_devname=get_crypto_LUKS_volume_devname(dev_name)
                        v('backupdecryptvol devname is : \"'+backupdecryptvol_devname+'\"',2)
                        setup_decryptvol_done=True
                else: raise Exception('found uuid but is not crypto_LUKS... something is wrong')
    if not setup_decryptvol_done:
        raise Exception("\n".join(["could not setup decryptvol","maybe simply nothing matching had been found"]))

def check(function):
    def checker(*args):
        if function(*args):
            pass
        else: raise Exception('Check failed: '+function.__name__+' '+str(args))
    return checker

def checkisnot(function):
    def checker(*args):
        if not function(*args):
            pass
        else: raise Exception('Check is not failed: '+function.__name__+' '+str(args))
    return checker

def path_is_mountpoint(path):
    cmd=['mountpoint',path]
    try:
        if sp.check_call(cmd,stdout=sp.DEVNULL,stderr=sp.DEVNULL) is 0:
            #is mountpoint
            return True
        else:
            return False
            v('warning: not expected that case',1)
    except sp.CalledProcessError:
        return False

def try_sys_cmd(cmdlist):
    sp.check_call(cmdlist,stdout=sp.DEVNULL,stderr=sp.DEVNULL)

def setup_basedir():
    basedir = dest_dir_base + '/' ##need trailing slash
    check(path.isdir)(basedir)
    v('basedir \"'+basedir+'\" ok',5)

def dir_is_empty(dir):
    if len(listdir(dir)) is 0:
        return True
    else: return False

def mount(dev,dir):
    cmd=['sudo' ,'mount','-o','noatime,compress=zlib:3',dev,dir]
    try_sys_cmd(cmd)

def _unmount(dev):
    cmd=['sudo' ,'umount',dev]
    try_sys_cmd(cmd)

def setup_backupdir():
    global backupdir
    backupdir=basedir+backupdecryptvolname
    if path.exists(backupdir):
        check(path.isdir)(backupdir)
        v('backupdir is existing dir',3)
    else:
        v('try to create dir: \"'+backupdir,2)
        try_sys_cmd(['sudo', 'mkdir',backupdir])
        check(path.isdir)(backupdir)
        v('backupdir is there now: \"'+backupdir+'\"',3)

def is_dev_mounted_to_dir(dev,dir):
    v('checking if dev: \"'+dev+'\" is mounted to dir: \"'+dir,5)
    cmd=['cat' ,'/proc/mounts']
    out=sp.check_output(cmd).decode().splitlines()
    for line in out:
        if line.find(dev) is not -1:
            v('#dev is mounted to somewhere...',8)
            if line.find(dir) is -1:
                v('#but on this line not to dir',8)
            else:
                v('#and it is dir',8)
                v('--> True',5)
                return True
    v('--> False',5)
    return False

def is_dev_mounted_elsewhere(dev,dir):
    v('checking if dev: \"'+dev+'\" is mounted to somewhere else than dir: \"'+dir,5)
    cmd=['cat' ,'/proc/mounts']
    out=sp.check_output(cmd).decode().splitlines()
    for line in out:
        if line.find(dev) is not -1:
            v('#dev is mounted to somewhere...',8)
            if line.find(dir) is -1:
                v('#but its something else than backupdir...',8)
                v('--> True',5)
                return True
    v('--> False',5)
    return False

def is_dev_only_thing_mounted_here(dev,dir):
    v('checking if dev: \"'+dev+'\" is the only thing mounted to dir: \"'+dir,5)
    cmd=['cat' ,'/proc/mounts']
    out=sp.check_output(cmd).decode().splitlines()
    for line in out:
        if line.find(dir) is not -1:
            v('#something is mounted to dir',8)
            if line.find(dev) is -1:
                v('#but its something else than dev...',8)
                v('--> False',5)
                return False
    v('--> True',5)
    return True

def is_mountpoint_ok(dev,dir):
    if path_is_mountpoint(dir):
        if is_dev_mounted_to_dir(dev,dir):
            if is_dev_only_thing_mounted_here(dev,dir):
                if not is_dev_mounted_elsewhere(dev,dir):
                    return True
    return False

def setup_mountpoint():
    global setup_mountpoint_done
    setup_basedir()
    setup_backupdir()
    if path_is_mountpoint(backupdir):
        check(is_mountpoint_ok)(backupdecryptvol_devname,backupdir)
        setup_mountpoint_done=True
        v('mountpoint setup successfull: '+backupdir,2,g=1)
        v('mountpoint setup successfull',1,g=1)
        v('',9,g=1,r=1)
    else:
        checkisnot(is_dev_mounted_elsewhere)(backupdecryptvol_devname,backupdir)#if is, better abort
        check(path.isdir)(backupdir)#else better abort
        check(dir_is_empty)(backupdir)#else better abort
        mount(backupdecryptvol_devname,backupdir)
        check(is_mountpoint_ok)(backupdecryptvol_devname,backupdir)
        setup_mountpoint_done=True
        v('mountpoint setup successfull: '+backupdir,2,g=1)
        v('mountpoint setup successfull',1,g=1)
        v('',9,g=1,r=1)

def unmount():
    if is_dev_mounted_to_dir(backupdecryptvol_devname,backupdir):
        if not is_dev_mounted_elsewhere(backupdecryptvol_devname,backupdir):
            _unmount(backupdecryptvol_devname)
            setup_mountpoint_done=False
        else:
            setup_mountpoint_done=False
            raise Exception(DEVC+backupdecryptvol_devname+Q+' is mounted elsewhere. unmount manualy.')
    else:
        setup_mountpoint_done=False
        v(DEV+backupdecryptvol_devname+Q+' is already unmounted.',0)

def unmap():
    if get_crypto_LUKS_volume_devname(encrypted_dev_name)==backupdecryptvol_devname:
        ##dev_name seems ok
        if check_luks_open(encrypted_dev_name):
            close_crypto_LUKS(backupdecryptvol_devname)
            setup_decryptvol_done=False
        else:
            setup_decryptvol_done=False
            raise Exception('backupdecryptvol_devname: '+Q+backupdecryptvol_devname+Q+' is already closed')
        checkisnot(check_luks_open)(encrypted_dev_name)
        setup_decryptvol_done=False
    else:
        setup_decryptvol_done=False
        raise Exception('get_crypto_LUKS_volume_devname(encrypted_dev_name)==backupdecryptvol_devname is not equal. not expected')

def do_backup():
    setup_all()
    pairs=search_for_shared_snapshot_pairs()
    parent=None
    clone_src=None
    if len(search_for_shared_snapshot_pairs()) > 0:
        #pick last, hopefully the latest
        parent=src_snap_dir+'/'+pairs[-1]
        bashcode1='nice -n19 ionice -c3 sudo btrfs send -p '+parent+' '+snap
    else:
        bashcode1='nice -n19 ionice -c3 sudo btrfs send '+snap
    bashcode2='nice -n19 ionice -c3 sudo btrfs receive '+backupdir
    pipe='|'
    bashcode=bashcode1+pipe+bashcode2
    log.info('parent: '+ str(parent))
    log.info('clone src: '+ str(clone_src))
    log.debug(bashcode1)
    log.debug(bashcode2)
    log.debug(bashcode)
    if args.testing:
        return
    shell=['bash','-c',bashcode]
    retv=sp.check_call(shell)
    log.debug(retv)
    if retv == 0:
        rename_matching([basename(snap)])

def do_inc_backup(parent):
    setup_all()
    bashcode1='nice -n19 ionice -c3 sudo btrfs send -p '+parent+' '+snap
    bashcode2='nice -n19 ionice -c3 sudo btrfs receive '+backupdir
    pipe='|'
    bashcode=bashcode1+pipe+bashcode2
    shell=['bash','-c',bashcode]
    sp.check_call(shell)

def setup_all():
    if not setup_snapshot_done: setup_snapshot()
    if not setup_decryptvol_done: setup_decryptvol()
    if not setup_mountpoint_done: setup_mountpoint()


def ask_rename_pairs():
    setup_all()
    pairs=search_for_shared_snapshot_pairs()
    ask=False
    for i in pairs:
        if not i[0:8] == 'backuped':
            ask=True
    if len(pairs) > 0 and ask:
        if input('rename the pairs? (yes/no)') == 'yes':
            rename_matching(pairs)

def search_for_shared_snapshot_pairs():
    """
    search for shared snapshots, that are needed to do incremental backups.
    return list of pathnames. latest one first.
    """
    aa=sp.check_output(['find',  src_snap_dir + '/', '-maxdepth', '1','-mindepth', '1',  '-name', 'snapshot-start*'  , '-printf' , '%f\n']).decode().splitlines()
    log.debug('aa'+ str(aa))
    aaa=sp.check_output(['find', src_snap_dir + '/', '-maxdepth', '1', '-mindepth', '1',  '-name', 'backuped-snapshot-start*', '-printf' , '%f\n']).decode().splitlines()
    log.debug('aaa: '+str(aaa))
    a=aa+aaa
    log.debug('a'+str(a))
    b=sp.check_output(['find', basedir, '-maxdepth', '2' ,'-mindepth', '2' , '-printf' , '%f\n']).decode().splitlines()
    log.debug('b'+str(b))
    e=[]
    for i in a:
      e.append(basename(i))
    log.debug('snapshots on harddisk: ' + str(e))
    f=[]
    for i in b:
      f.append(basename(i))
    log.debug('snapshots on backup media: ' + str(f))
    m=[]
    for i in e:
      for j in f:
        if j==i:
          #match
          log.debug('match')
          m.append(i)
    log.debug('name matched snapshots: '+ str(m))
    clones=[]
    for i in m:
      target_received_uuid=None
      source_uuid=None
      parent_uuid=None
      log.debug('')
      log.debug('checking match: '+i)
      log.debug('###########################')
      #further checking...
      #first harddisk
      log.debug('        Harddisk:')
      cmd=['sudo', 'btrfs', 'sub', 'show', src_snap_dir + '/'+i]
      outp=sp.check_output(cmd).decode().splitlines()
      for line in outp:
        erg=line.find('UUID:')
        erg2=line.find('Parent UUID:')
        erg3=line.find('Received UUID:')
        if not erg is -1 and erg2 is -1 and erg3 is -1:
          uuidline=line
          uuid=uuidline.split(' ')[1].strip()
          log.debug('               uuid: '+uuid)
          source_uuid=uuid
          log.debug('           = source_uuid: '+source_uuid)
        if not erg is -1 and not erg2 is -1 and erg3 is -1:
          parent_uuidline=line
          src_parent_uuid = parent_uuidline.split(' ')[2].strip()
          log.debug('               parent uuid: '+src_parent_uuid)
        if not erg is -1 and not erg3 is -1 and erg2 is -1:
          received_uuidline=line
          received_uuid=received_uuidline.split(' ')[2]
          log.debug('               received uuid: '+received_uuid)

      #backup media
      log.debug('        Backup media:')
      cmd=['sudo', 'btrfs', 'sub', 'show',backupdir+'/'+i]
      outp=sp.check_output(cmd).decode().splitlines()
      for line in outp:
        erg=line.find('UUID:')
        erg2=line.find('Parent UUID:')
        erg3=line.find('Received UUID:')
        if not erg is -1 and erg2 is -1 and erg3 is -1:
          uuidline=line
          uuid=uuidline.split(' ')[1]
          log.debug('               uuid: '+uuid)
        if not erg is -1 and not erg2 is -1 and erg3 is -1:
          parent_uuidline=line
          parent_uuid = parent_uuidline.split(' ')[2]
          log.debug('               parent uuid: '+parent_uuid)
        if not erg is -1 and not erg3 is -1 and erg2 is -1:
          received_uuidline=line
          received_uuid=received_uuidline.split(' ')[2].strip()
          target_received_uuid = received_uuid
          log.debug('               received uuid: '+received_uuid)
          log.debug('         =  target_received_uuid: '+target_received_uuid)
      log.debug('############################################################')
      log.debug('target_received_uuid: '+target_received_uuid)
      log.debug('         source_uuid: '+source_uuid)
      log.debug('############################################################')
      if target_received_uuid == source_uuid:
        clones.append(i)
        log.debug( "                   backupmedium-uuid matches fs-to-backup-uuid")
      else:
         log.debug("                                        X                     ")
    log.info('matching pairs: ')
    for i in clones:
        log.info('                    ->  '+ i)
    shared_pairs = clones
    searched_pairs=True
    return clones

def rename_matching(snapshots_basename_list):
    for snap in snapshots_basename_list:
        log.debug(snap)
        if not snap[0:8] == 'backuped':
          bashcode1 = 'nice -n19 ionice -c3 sudo mv '+src_snap_dir+'/'+snap   +' '+   src_snap_dir+'/backuped-'+snap
          bashcode2 = 'nice -n19 ionice -c3 sudo mv  ' + backupdir + '/' +snap + ' '  + backupdir + '/backuped-' + snap
          log.debug(bashcode1)
          log.debug(bashcode2)
          shell=['bash','-c',bashcode1]
          sp.check_call(shell)
          shell=['bash','-c',bashcode2]
          sp.check_call(shell)

def search_for_parent():
      cmd=['sudo', 'btrfs', 'sub', 'show','/']
      outp=sp.check_output(cmd).decode().splitlines()

def prog():
  if args.unsetup:
     if not setup_decryptvol_done: setup_decryptvol()
     if not setup_mountpoint_done: setup_mountpoint()
     unmount()
     unmap()
     exit(0)
  setup_all()
  ask_rename_pairs()
  a=input('do backup? (y/n)')
  if a=='y':
      do_backup()
  elif a=='n':
      pass
  else:
      print('invalid input. exit')


if not args.testing:
  prog()
else:
    do_backup()
